@model Application.Web.Models.ViewModels.ExpectedReceiptViewModel.ExpectedReceiptLine
@{
    ViewBag.Title = "Receipt Lines Edit";
}
<style type="text/css">
    .select2-container {
        width: 100% !important;
    }
</style>
<div id="form-container" data-url="@Url.Action("Edit","ReceiptLines")">
    @using (Html.BeginForm("Edit", "ReceiptLines", FormMethod.Post, new { id = "create-form" }))
    {
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.ExpectedReceiptId)
        @Html.HiddenFor(model => model.GoodsReceivedNumber, new { Value = ViewBag.GoodsReceivedNo })
        @Html.HiddenFor(model => model.StatusCode, new { Value = ViewBag.StatCode })
        @Html.HiddenFor(model => model.BrandId)
        @Html.HiddenFor(model => model.ItemCode)
        @Html.HiddenFor(model => model.IsItemExist)
        @Html.HiddenFor(model => model.CustomerId)
        @Html.HiddenFor(model => model.IsChecked)
        @Html.HiddenFor(model => model.IsActive)
        @Html.HiddenFor(model => model.ProductId)
        @Html.HiddenFor(model => model.DateCreated)
        @Html.HiddenFor(model => model.CreatedBy)

        <div class="box-body">
            <div class="form-horizontal">
                <div class="col-md-12">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.ProductCode, "Item Group", new { @class = "control-label col-md-15" })
                            <select class="form-control" id="ProductCode" name="ProductCode" >
                                @if (Model.ProductCode != null)
                                {
                                    <option value="@Model.ProductCode" selected="selected">@ViewBag.ProdDesc</option>
                                }
                            </select>
                            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.ItemId, "Item Code", new { @class = "control-label col-md-15" })
                            <select class="form-control" id="ItemId" name="ItemId">
                                @if (Model.ItemCode != null)
                                {
                                    <option value="@Model.ItemId" selected="selected" data-itemCode="@Model.ItemCode">@Model.ItemCode</option>
                                }
                            </select>
                            @Html.ValidationMessageFor(model => model.ItemId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.BrandName, new { @class = "control-label col-md-15" })
                            @Html.EditorFor(model => model.BrandName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.BrandName, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.ItemDescription, new { @class = "control-label col-md-15" })
                            @Html.EditorFor(model => model.ItemDescription, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.ItemDescription, "", new { @class = "text-danger" })
                        </div>
                        @*<div class="col-md-6">
                            @Html.LabelFor(model => model.Brand, new { @class = "control-label col-md-15" })
                            @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                        </div>*@
                    </div>
                    <div class="form-group">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.Batch, new { @class = "control-label col-md-3" })
                            @Html.EditorFor(model => model.Batch, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Batch, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @if (Model.ExpiryDate == null)
                            {
                                @Html.LabelFor(model => model.ExpiryDate, new { @class = "control-label col-md-15" })
                                @Html.TextBox("ExpiryDate", DateTime.Now, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date", min = DateTime.Now.ToString("yyyy-MM-dd") })
                                @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.LabelFor(model => model.ExpiryDate, new { @class = "control-label col-md-15" })
                                @Html.TextBox("ExpiryDate", Model.ExpiryDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date"})
                                @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger" })
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.Quantity, new { @class = "control-label col-md-3" })
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.UomId, "Uom", new { @class = "control-label col-md-15" })
                            <select class="form-control" id="UomId" name="UomId" required>
                                @if (Model.UomId != null)
                                {
                                    <option value="@Model.UomId" selected="selected">@Model.UomDescription</option>
                                }
                            </select>
                            @Html.ValidationMessageFor(model => model.UomDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @*<div class="form-group">
                        @Html.LabelFor(model => model.ProductId, "Item Group", new { @class = "control-label col-md-3" })
                        <div class="col-md-12">
                            <select class="form-control" id="ProductId" name="ProductId" required>
                                @if (Model.ProductId != null)
                                {
                                    <option value="@Model.ProductId" selected="selected">@Model.ProductCode</option>
                                }
                            </select>
                            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ItemDescription, new { @class = "control-label col-md-3" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ItemDescription, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ItemDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ItemCode, new { @class = "control-label col-md-3" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ItemCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ItemCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Brand, new { @class = "control-label col-md-3" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Batch, new { @class = "control-label col-md-3" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Batch, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Batch, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ExpiryDate, new { @class = "control-label col-md-3" })
                        <div class="col-md-12">
                            @Html.TextBox("ExpiryDate", DateTime.Now, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                            @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Quantity, new { @class = "control-label col-md-3" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.UomId, "Uom", new { @class = "control-label col-md-3" })
                        <div class="col-md-12">
                            <select class="form-control" id="UomId" name="UomId" required>
                                @if (Model.UomId != null)
                                {   
                                    <option value="@Model.UomId" selected="selected">@Model.UomDescription</option>
                                }
                            </select>
                            @Html.ValidationMessageFor(model => model.UomId, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
                </div>
            </div>
        </div>
        <div class="box-footer">
            <input type="submit" id="create-submit" value="Save" class="btn btn-primary pull-right" />
        </div>
    }
</div>

<link href="~/Content/css-select2/select2.css" rel="stylesheet" />
<script src="~/Content/js-select2/select2.js"></script>

<script type="text/javascript">

    //Select2

    var productCd = $("select#ProductCode").val();
    var brandId = 0;
    var itemId = 0;
    var customerId = 0;

    //Select2
     var productSelectList = new CustomSelectList(['#ProductCode', '@Url.Action("ProductList", "SelectList")', 'Search Item Group']);
     productSelectList.init();

    @*CustomSelectList.init(['#ProductCode', '@Url.Action("ProductList", "SelectList")', 'Search Item Group']);*@

     var itemSelectList = new CustomSelectList(['#ItemId', '@Url.Action("ItemCodeByProductCode", "SelectList")', 'Search Item Code', productCd]);
     itemSelectList.init3();

    @*CustomSelectList.init3(['#ItemId', '@Url.Action("ItemCodeByProductCode", "SelectList")', 'Search Item Code', productCd]);*@
    $('#ProductCode').on('select2:select', function (e) {
        debugger;
        //$('#ItemId').empty().trigger('change');
        productCd = $(e.currentTarget).val();
         itemSelectList = new CustomSelectList(['#ItemId', '@Url.Action("ItemCodeByProductCode", "SelectList")', 'Search Item Code', productCd]);
        itemSelectList.init3();
        @*CustomSelectList.init3(['#ItemId', '@Url.Action("ItemCodeByProductCode", "SelectList")', 'Search Item Code', productCd]);*@
    });

    $("#ItemId").change(function () {
        debugger;
        var itemId = $("select#ItemId").val();

        var tempItemCode = $("#select2-ItemId-container").text();
        var itemCode = $("select#ItemId").text();
        if (tempItemCode != '') {
            itemCode = $("select#ItemId").text().replace(tempItemCode, '');
        }

        //var itemCode = $("select#ItemId").text()
        if (itemId == null || itemId == '') {
            itemId = null;
        }

        $.ajax({

            url: '@Url.Action("ItemDescBrandByItemCode", "SelectList")' + "?itemId=" + itemId,
            method:"POST",
            datatype: "json",
            contentType: "application/json",
            success: function (data) {
                debugger;
                var obj = JSON.parse(data);
                $("#ItemDescription").val(obj.ItemDescription);
                $("#BrandName").val(obj.BrandName);
                $("#BrandId").val(obj.BrandId);
                $("#ItemCode").val(itemCode);
            }
        });
    });

    var uomSelectList = new CustomSelectList(['#UomId', '@Url.Action("UomIdList", "SelectList")', 'Search Uom']);
    uomSelectList.init();
    @*CustomSelectList.init(['#UomId', '@Url.Action("UomIdList", "SelectList")', 'Search Uom']);*@

    $('#create-submit').click(function () {
        var formcontainer = $('#form-container');
        var url = formcontainer.attr('data-url');
        var form = $('#create-form');
        form.removeData('validator');
        form.removeData('unobtrusiveValidation');
        $.validator.unobtrusive.parse(form);
        form.validationEngine('validate');

        return false;
    });


    $('.modal-title').html("<b>Edit</b>");
</script>